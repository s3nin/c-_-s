{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "711b8d03",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:17.783889Z",
     "iopub.status.busy": "2024-05-06T16:16:17.782598Z",
     "iopub.status.idle": "2024-05-06T16:16:19.075113Z",
     "shell.execute_reply": "2024-05-06T16:16:19.072216Z"
    },
    "papermill": {
     "duration": 1.306508,
     "end_time": "2024-05-06T16:16:19.078533",
     "exception": false,
     "start_time": "2024-05-06T16:16:17.772025",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/irish-dataset/irish.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f43ed74f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:19.102142Z",
     "iopub.status.busy": "2024-05-06T16:16:19.101049Z",
     "iopub.status.idle": "2024-05-06T16:16:22.227647Z",
     "shell.execute_reply": "2024-05-06T16:16:22.226030Z"
    },
    "papermill": {
     "duration": 3.143701,
     "end_time": "2024-05-06T16:16:22.230775",
     "exception": false,
     "start_time": "2024-05-06T16:16:19.087074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import plotly.express as px\n",
    "import plotly.graph_objs as go\n",
    "import matplotlib.pyplot as plt\n",
    "from wordcloud import WordCloud\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import accuracy_score\n",
    "from collections import defaultdict\n",
    "from scipy.spatial.distance import cdist\n",
    "from sklearn.preprocessing import MinMaxScaler, StandardScaler\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "055496aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:22.249725Z",
     "iopub.status.busy": "2024-05-06T16:16:22.248673Z",
     "iopub.status.idle": "2024-05-06T16:16:22.271052Z",
     "shell.execute_reply": "2024-05-06T16:16:22.269528Z"
    },
    "papermill": {
     "duration": 0.035654,
     "end_time": "2024-05-06T16:16:22.274400",
     "exception": false,
     "start_time": "2024-05-06T16:16:22.238746",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv(\"../input/irish-dataset/irish.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "506932fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:22.293733Z",
     "iopub.status.busy": "2024-05-06T16:16:22.292659Z",
     "iopub.status.idle": "2024-05-06T16:16:22.301847Z",
     "shell.execute_reply": "2024-05-06T16:16:22.300559Z"
    },
    "papermill": {
     "duration": 0.022228,
     "end_time": "2024-05-06T16:16:22.304315",
     "exception": false,
     "start_time": "2024-05-06T16:16:22.282087",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(150, 5)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "29aa5a47",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:22.322219Z",
     "iopub.status.busy": "2024-05-06T16:16:22.321496Z",
     "iopub.status.idle": "2024-05-06T16:16:22.352023Z",
     "shell.execute_reply": "2024-05-06T16:16:22.350486Z"
    },
    "papermill": {
     "duration": 0.042797,
     "end_time": "2024-05-06T16:16:22.354862",
     "exception": false,
     "start_time": "2024-05-06T16:16:22.312065",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal length</th>\n",
       "      <th>sepal width</th>\n",
       "      <th>petal length</th>\n",
       "      <th>petal width</th>\n",
       "      <th>flower type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal length  sepal width   petal length   petal width  flower type\n",
       "0           5.1          3.5             1.4          0.2  Iris-setosa\n",
       "1           4.9          3.0             1.4          0.2  Iris-setosa\n",
       "2           4.7          3.2             1.3          0.2  Iris-setosa\n",
       "3           4.6          3.1             1.5          0.2  Iris-setosa\n",
       "4           5.0          3.6             1.4          0.2  Iris-setosa"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "209b1d91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:22.377258Z",
     "iopub.status.busy": "2024-05-06T16:16:22.376069Z",
     "iopub.status.idle": "2024-05-06T16:16:22.394621Z",
     "shell.execute_reply": "2024-05-06T16:16:22.392997Z"
    },
    "papermill": {
     "duration": 0.033225,
     "end_time": "2024-05-06T16:16:22.397182",
     "exception": false,
     "start_time": "2024-05-06T16:16:22.363957",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal length</th>\n",
       "      <th>sepal width</th>\n",
       "      <th>petal length</th>\n",
       "      <th>petal width</th>\n",
       "      <th>flower type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>6.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     sepal length  sepal width   petal length   petal width     flower type\n",
       "145           6.7          3.0             5.2          2.3  Iris-virginica\n",
       "146           6.3          2.5             5.0          1.9  Iris-virginica\n",
       "147           6.5          3.0             5.2          2.0  Iris-virginica\n",
       "148           6.2          3.4             5.4          2.3  Iris-virginica\n",
       "149           5.9          3.0             5.1          1.8  Iris-virginica"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c965d6b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:22.417984Z",
     "iopub.status.busy": "2024-05-06T16:16:22.417430Z",
     "iopub.status.idle": "2024-05-06T16:16:22.428009Z",
     "shell.execute_reply": "2024-05-06T16:16:22.426975Z"
    },
    "papermill": {
     "duration": 0.02369,
     "end_time": "2024-05-06T16:16:22.430579",
     "exception": false,
     "start_time": "2024-05-06T16:16:22.406889",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sepal length      False\n",
       "sepal width       False\n",
       " petal length     False\n",
       "petal width       False\n",
       " flower type      False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check the presence of missing values\n",
    "data.isnull().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "17c09e5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:22.449434Z",
     "iopub.status.busy": "2024-05-06T16:16:22.448946Z",
     "iopub.status.idle": "2024-05-06T16:16:22.466761Z",
     "shell.execute_reply": "2024-05-06T16:16:22.464417Z"
    },
    "papermill": {
     "duration": 0.031673,
     "end_time": "2024-05-06T16:16:22.470585",
     "exception": false,
     "start_time": "2024-05-06T16:16:22.438912",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sepal length      35\n",
       "sepal width       23\n",
       " petal length     43\n",
       "petal width       22\n",
       " flower type       3\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#No of unique values in each column of the data in dataset\n",
    "data.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4532374f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:22.499407Z",
     "iopub.status.busy": "2024-05-06T16:16:22.498797Z",
     "iopub.status.idle": "2024-05-06T16:16:22.508754Z",
     "shell.execute_reply": "2024-05-06T16:16:22.507552Z"
    },
    "papermill": {
     "duration": 0.028289,
     "end_time": "2024-05-06T16:16:22.512846",
     "exception": false,
     "start_time": "2024-05-06T16:16:22.484557",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([' flower type'], dtype='object')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Find non-numerical data in dataset\n",
    "data.select_dtypes(exclude='number').columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a3e5277c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:22.538281Z",
     "iopub.status.busy": "2024-05-06T16:16:22.537837Z",
     "iopub.status.idle": "2024-05-06T16:16:22.546004Z",
     "shell.execute_reply": "2024-05-06T16:16:22.544546Z"
    },
    "papermill": {
     "duration": 0.025404,
     "end_time": "2024-05-06T16:16:22.548599",
     "exception": false,
     "start_time": "2024-05-06T16:16:22.523195",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['sepal length', 'sepal width', ' petal length ', 'petal width',\n",
       "       ' flower type'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fad3b60e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:22.568392Z",
     "iopub.status.busy": "2024-05-06T16:16:22.567876Z",
     "iopub.status.idle": "2024-05-06T16:16:22.579520Z",
     "shell.execute_reply": "2024-05-06T16:16:22.578002Z"
    },
    "papermill": {
     "duration": 0.024537,
     "end_time": "2024-05-06T16:16:22.582161",
     "exception": false,
     "start_time": "2024-05-06T16:16:22.557624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Custom Mapping\n",
    "data[' flower type'] = data[' flower type'].map({'Iris-setosa': 0, 'Iris-versicolor': 1, 'Iris-virginica':2})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4ccad77c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:22.602582Z",
     "iopub.status.busy": "2024-05-06T16:16:22.602047Z",
     "iopub.status.idle": "2024-05-06T16:16:22.617774Z",
     "shell.execute_reply": "2024-05-06T16:16:22.616724Z"
    },
    "papermill": {
     "duration": 0.028947,
     "end_time": "2024-05-06T16:16:22.620457",
     "exception": false,
     "start_time": "2024-05-06T16:16:22.591510",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal length</th>\n",
       "      <th>sepal width</th>\n",
       "      <th>petal length</th>\n",
       "      <th>petal width</th>\n",
       "      <th>flower type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal length  sepal width   petal length   petal width   flower type\n",
       "0           5.1          3.5             1.4          0.2             0\n",
       "1           4.9          3.0             1.4          0.2             0\n",
       "2           4.7          3.2             1.3          0.2             0\n",
       "3           4.6          3.1             1.5          0.2             0\n",
       "4           5.0          3.6             1.4          0.2             0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29a96d0b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:22.646004Z",
     "iopub.status.busy": "2024-05-06T16:16:22.645006Z",
     "iopub.status.idle": "2024-05-06T16:16:22.950746Z",
     "shell.execute_reply": "2024-05-06T16:16:22.948154Z"
    },
    "papermill": {
     "duration": 0.324291,
     "end_time": "2024-05-06T16:16:22.956002",
     "exception": false,
     "start_time": "2024-05-06T16:16:22.631711",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " flower type\n",
      "0    50\n",
      "1    50\n",
      "2    50\n",
      "Name: count, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.countplot(x=' flower type',data=data)\n",
    "print(data[' flower type'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0535a121",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:22.982721Z",
     "iopub.status.busy": "2024-05-06T16:16:22.981830Z",
     "iopub.status.idle": "2024-05-06T16:16:22.996611Z",
     "shell.execute_reply": "2024-05-06T16:16:22.995280Z"
    },
    "papermill": {
     "duration": 0.030705,
     "end_time": "2024-05-06T16:16:22.999648",
     "exception": false,
     "start_time": "2024-05-06T16:16:22.968943",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (120, 4)\n",
      "X_test shape: (30, 4)\n",
      "y_train shape: (120,)\n",
      "y_test shape: (30,)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Splitting features (X) and target variable (y)\n",
    "X = data.iloc[:, :-1]  # Selecting all columns except the last one as features\n",
    "y = data.iloc[:, -1]   # Selecting the last column as the target variable\n",
    "\n",
    "# Splitting the data into train and test sets\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Printing the shapes of train and test sets\n",
    "print(\"X_train shape:\", X_train.shape)\n",
    "print(\"X_test shape:\", X_test.shape)\n",
    "print(\"y_train shape:\", y_train.shape)\n",
    "print(\"y_test shape:\", y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ad097356",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:23.021417Z",
     "iopub.status.busy": "2024-05-06T16:16:23.020583Z",
     "iopub.status.idle": "2024-05-06T16:16:23.519555Z",
     "shell.execute_reply": "2024-05-06T16:16:23.517579Z"
    },
    "papermill": {
     "duration": 0.51385,
     "end_time": "2024-05-06T16:16:23.522777",
     "exception": false,
     "start_time": "2024-05-06T16:16:23.008927",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABFkAAANECAYAAABrcvD1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAC25UlEQVR4nOzdd3wU1frH8e9syqaRAiEJhJIA0i5VEARFQEGstAtKb6KgeC2xohQBFRuIeEVUlOLPgiLXcvECCiIqoFTpNaFDAimkF7L7+wNZWBMgC7NpfN6v17zMnjkz+8xkGZMn5znHsNvtdgEAAAAAAOCKWEo6AAAAAAAAgPKAJAsAAAAAAIAJSLIAAAAAAACYgCQLAAAAAACACUiyAAAAAAAAmIAkCwAAAAAAgAlIsgAAAAAAAJiAJAsAAAAAAIAJSLIAAAAAAACYgCQLAKDMmDNnjgzD0P79+0075/79+2UYhubMmWPaOcu6Dh06qEOHDiUdBgAAQJlDkgUArnL79u3TiBEjVKtWLfn4+CgwMFA33HCD3nrrLWVlZZV0eKb59NNPNW3atJIOw8mQIUNkGIYCAwMLvdd79uyRYRgyDENvvPGGy+c/evSoXnjhBW3atMmEaC+fYRh6+OGHC913NnG2bt06t71/abkPAACg/PMs6QAAACVn0aJF6t27t6xWqwYNGqRGjRopNzdXv/76q5566ilt27ZN77//fkmHaYpPP/1UW7du1WOPPebUXrNmTWVlZcnLy6tE4vL09FRmZqa+++473XPPPU77PvnkE/n4+Cg7O/uyzn306FFNmDBBUVFRatasWZGPW7p06WW9X2l1ufcBAADAVSRZAOAqFRcXpz59+qhmzZpavny5qlSp4tg3atQo7d27V4sWLbri97Hb7crOzpavr2+BfdnZ2fL29pbFUnIDKw3DkI+PT4m9v9Vq1Q033KDPPvusQJLl008/1Z133qmvvvqqWGLJzMyUn5+fvL29i+X9AAAAyhvKhQDgKvXaa68pPT1dH374oVOC5aw6dero0Ucfdbw+ffq0Jk2apNq1a8tqtSoqKkrPPfeccnJynI6LiorSXXfdpSVLlqhly5by9fXVe++9pxUrVsgwDH3++ecaM2aMIiMj5efnp9TUVEnS77//rttuu01BQUHy8/NT+/bt9dtvv13yOr755hvdeeedqlq1qqxWq2rXrq1JkyYpPz/f0adDhw5atGiRDhw44Ci/iYqKknThOVmWL1+udu3ayd/fX8HBwerWrZt27Njh1OeFF16QYRjau3evhgwZouDgYAUFBWno0KHKzMy8ZOxn9evXT//73/+UkpLiaFu7dq327Nmjfv36FeiflJSkJ598Uo0bN1ZAQIACAwN1++23688//3T0WbFiha677jpJ0tChQx3XffY6O3TooEaNGmn9+vW66aab5Ofnp+eee86x7/w5WQYPHiwfH58C19+lSxeFhITo6NGjRb7Wotq5c6d69eqlihUrysfHRy1bttS3337rtvuwefNmtW/fXn5+fqpTp44WLFggSfr555/VunVr+fr6ql69evrxxx+dYjhw4IAeeugh1atXT76+vqpUqZJ69+5dYN6gs2VRK1eu1IgRI1SpUiUFBgZq0KBBSk5ONvnuAQCAksJIFgC4Sn333XeqVauW2rZtW6T+w4cP19y5c9WrVy898cQT+v333zV58mTt2LFD//nPf5z67tq1S3379tWIESN0//33q169eo59kyZNkre3t5588knl5OTI29tby5cv1+23364WLVpo/Pjxslgsmj17tm6++Wb98ssvatWq1QXjmjNnjgICAhQTE6OAgAAtX75c48aNU2pqql5//XVJ0vPPP69Tp07p8OHDevPNNyVJAQEBFzznjz/+qNtvv121atXSCy+8oKysLL399tu64YYbtGHDBkeC5qx77rlH0dHRmjx5sjZs2KBZs2YpLCxMr776apHubc+ePTVy5EgtXLhQw4YNk3RmFEv9+vV17bXXFugfGxurr7/+Wr1791Z0dLTi4+P13nvvqX379tq+fbuqVq2qBg0aaOLEiRo3bpweeOABtWvXTpKcvt+JiYm6/fbb1adPHw0YMEDh4eGFxvfWW29p+fLlGjx4sFavXi0PDw+99957Wrp0qT7++GNVrVr1kteYnZ2tkydPFmhPT08v0LZt2zbdcMMNioyM1LPPPit/f3998cUX6t69u7766iv16NHD1PuQnJysu+66S3369FHv3r317rvvqk+fPvrkk0/02GOPaeTIkerXr59ef/119erVS4cOHVKFChUknUmGrVq1Sn369FG1atW0f/9+vfvuu+rQoYO2b98uPz8/p2t7+OGHFRwcrBdeeEG7du3Su+++qwMHDjiSkAAAoIyzAwCuOqdO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RsrNzdWqVav05ZdfasiQIZKkpk2bavDgwXr//fcdJTp//PGH5s6dq+7duzv9Zd5VFotFs2bN0u23365//OMfGjp0qCIjI3XkyBH99NNPCgwM1HfffVfosW3btlVISIgGDx6sRx55RIZh6OOPPy60TKdFixaaP3++YmJidN111ykgIEB33313oed9/fXXdfvtt6tNmza67777HEs4BwUFXbSM50pZLBaNGTPmkv3uuusuTZw4UUOHDlXbtm21ZcsWffLJJ45RIGfVrl1bwcHBmjlzpipUqCB/f3+1bt36onPmFGb58uWaMWOGxo8f71hSevbs2erQoYPGjh2r1157zaXzXco777yjG2+8UY0bN9b999+vWrVqKT4+XqtXr9bhw4f1559/Sir++1CYu+66Sx9//LGCgoLUsGFDrV69Wj/++OMF54TJzc3VLbfconvuuUe7du3SjBkzdOONN6pr165XHAsAACh5JFkA4CrWtWtXbd68Wa+//rq++eYbvfvuu7JarWrSpImmTJmi+++/39F31qxZqlWrlubMmaP//Oc/ioiI0OjRozV+/PgrjqNDhw5avXq1YxRHenq6IiIi1Lp1a40YMeKCx1WqVEn//e9/9cQTT2jMmDEKCQnRgAEDdMsttxSYz+Ohhx7Spk2bNHv2bL355puqWbPmBZMsnTp10uLFizV+/HiNGzdOXl5eat++vV599VVTfjG/Us8995wyMjL06aefav78+br22mu1aNEiPfvss079vLy8NHfuXI0ePVojR47U6dOnNXv2bJeuIS0tTcOGDVPz5s31/PPPO9rbtWunRx99VFOmTFHPnj11/fXXm3Z9DRs21Lp16zRhwgTNmTNHiYmJCgsLU/PmzTVu3DhHv+K8Dxfy1ltvycPDQ5988omys7N1ww036Mcff7zgfDL//ve/9cknn2jcuHHKy8tT3759NX36dLeWNAEAgOJj2F2ZlQ8AAAAumzNnjoYOHaq1a9eqZcuWJR0OAABwE+ZkAQAAAAAAMAFJFgAAAAAAABOQZAEAAAAAADABSRYAAAA3GzJkiOx2O/OxAABwBVauXKm7775bVatWlWEY+vrrry95zIoVK3TttdfKarWqTp06mjNnjltjJMkCAAAAAABKvYyMDDVt2lTvvPNOkfrHxcXpzjvvVMeOHbVp0yY99thjGj58uJYsWeK2GFld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ZuvWraZfv37Gz8/PnDhxwhhjzIULF8yoUaPM6tWrzZ49e8wXX3xhfHx8zKxZs+xx9O7d23Tu3PmacU6bNs0EBATYt3///Xfj7+9vpk+fbnbv3m0WLlxoIiIizCuvvGKvcymumTNnmp07d5rBgwcbX19fc/LkSWOMMXv27DEeHh5mxIgRZvv27earr74yZcuWNZJMQkKCSU1NNZMmTTL+/v7myJEj5siRI/bfS3h4uAkODjbvvfee2blzp4mJiTFubm5m+/btLvm7IPcUljZ///33m6eeesoYY8ypU6eMp6enCQgIMNu2bTPGGDNu3DjTokULe31J5ptvvjHGGHP27FkTEhJiunfvbjZv3my+++47U6lSJSPJrF+/3qSnp5s5c+YYSSYuLs4cOXLEnD592hhjTHR0tPH39zevvPKK2bFjh/nss8+MxWIxCxcudM0fALlq2rRpxsPDwzRq1MgsX77crFmzxjRp0sRERUXZ69zo/nns2DEjyUybNs0cOXLEHDt2zBhjzIYNG8wHH3xg/vrrL7Njxw7z4osvGi8vL7Nv3z77ucPDw83EiROvGd/V7X7cuHGmRo0aZsGCBWb37t1m2rRpxmq1mtjYWGOMMb/99puRZJo2bWpiY2PNli1bTMuWLR2u54svvjBeXl7m008/NXFxcWb06NHG39/f1KtXzxhz8fXw4IMPmo4dO9rv5ampqfbXco0aNcz3339v4uLizAMPPGDCw8NNWlrazf4pkIeio6ONr6+vefrpp8327dvt99yPPvrIXqdfv34mKirK/P7772bXrl3mzTffNFar1ezYseO67/effPKJ+fHHH83u3bvNihUrTPPmzc1dd91lP++lNpqQkJBlbPPnzzcBAQEmPT3dGGNMly5dTMmSJc2zzz5rjDHm4MGDRpLZuXOnMSbza+TJJ580FSpUML/88ovZtGmTuffee42fn595+umnjTHGnDx50pQrV86MGTPGHrsxl+8F7dq1M6tXrzZr1641kZGRpnv37i75nSPvpaammri4OCPJzJkzx34vu/oz8ty5c42Hh4d57733TFxcnJkwYYIpVqyY+fXXX40xzrfJ7H4uioiIsNc5fPhwpviv9d7Svn17M2DAAIe6devWNaNGjTLGXH6NRUZGmoULF9pfBxEREebChQvGGGN27dplihcvbiZOnGh27Nhhli1bZho0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",
      "text/plain": [
       "<Figure size 1500x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Check for correlation\n",
    "\n",
    "plt.figure(figsize = (15, 10))\n",
    "correlation_matrix = data.corr()\n",
    "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')\n",
    "plt.title('Correlation Matrix Heatmap')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2942d854",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:23.547012Z",
     "iopub.status.busy": "2024-05-06T16:16:23.546509Z",
     "iopub.status.idle": "2024-05-06T16:16:23.552420Z",
     "shell.execute_reply": "2024-05-06T16:16:23.551020Z"
    },
    "papermill": {
     "duration": 0.020561,
     "end_time": "2024-05-06T16:16:23.555122",
     "exception": false,
     "start_time": "2024-05-06T16:16:23.534561",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcef6d26",
   "metadata": {
    "papermill": {
     "duration": 0.010747,
     "end_time": "2024-05-06T16:16:23.576724",
     "exception": false,
     "start_time": "2024-05-06T16:16:23.565977",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0f8a86c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:23.601357Z",
     "iopub.status.busy": "2024-05-06T16:16:23.600882Z",
     "iopub.status.idle": "2024-05-06T16:16:24.164064Z",
     "shell.execute_reply": "2024-05-06T16:16:24.162439Z"
    },
    "papermill": {
     "duration": 0.579351,
     "end_time": "2024-05-06T16:16:24.167417",
     "exception": false,
     "start_time": "2024-05-06T16:16:23.588066",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Hyperparameters:  {'C': 10.0, 'penalty': 'l2'}\n",
      "[[14  0  0]\n",
      " [ 0 19  0]\n",
      " [ 0  0 12]]\n",
      "1.0\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        14\n",
      "           1       1.00      1.00      1.00        19\n",
      "           2       1.00      1.00      1.00        12\n",
      "\n",
      "    accuracy                           1.00        45\n",
      "   macro avg       1.00      1.00      1.00        45\n",
      "weighted avg       1.00      1.00      1.00        45\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "feature_train , feature_test, target_train, target_test = train_test_split(X, y,  test_size=0.3)\n",
    "\n",
    "param_grid = {\n",
    "    'penalty': ['l1', 'l2'],\n",
    "    'C': [0.1, 1.0, 10.0]\n",
    "}\n",
    "\n",
    "grid_search = GridSearchCV(LogisticRegression(), param_grid)\n",
    "grid_search.fit(feature_train, target_train)\n",
    "\n",
    "best_estimator = grid_search.best_estimator_\n",
    "best_params = grid_search.best_params_\n",
    "\n",
    "print(\"Best Hyperparameters: \",best_params)\n",
    "\n",
    "predictions = best_estimator.predict(feature_test)\n",
    "\n",
    "lr_acc = accuracy_score(target_test,predictions)\n",
    "print(confusion_matrix(target_test,predictions))\n",
    "print(lr_acc)\n",
    "print(classification_report(target_test,predictions))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ffce763",
   "metadata": {
    "papermill": {
     "duration": 0.011796,
     "end_time": "2024-05-06T16:16:24.189666",
     "exception": false,
     "start_time": "2024-05-06T16:16:24.177870",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "95c9e603",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:24.214090Z",
     "iopub.status.busy": "2024-05-06T16:16:24.212970Z",
     "iopub.status.idle": "2024-05-06T16:16:24.490366Z",
     "shell.execute_reply": "2024-05-06T16:16:24.488705Z"
    },
    "papermill": {
     "duration": 0.292701,
     "end_time": "2024-05-06T16:16:24.494038",
     "exception": false,
     "start_time": "2024-05-06T16:16:24.201337",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best hyperparameters:  {'n_neighbors': 7}\n",
      "[[20  0  0]\n",
      " [ 0 12  1]\n",
      " [ 0  0 12]]\n",
      "0.9777777777777777\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        20\n",
      "           1       1.00      0.92      0.96        13\n",
      "           2       0.92      1.00      0.96        12\n",
      "\n",
      "    accuracy                           0.98        45\n",
      "   macro avg       0.97      0.97      0.97        45\n",
      "weighted avg       0.98      0.98      0.98        45\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "\n",
    "feature_train , feature_test, target_train, target_test = train_test_split(X, y, test_size=0.3)\n",
    "\n",
    "knn = KNeighborsClassifier()\n",
    "\n",
    "param_grid = {'n_neighbors': [3, 5, 7]}\n",
    "\n",
    "grid_search = GridSearchCV(knn, param_grid)\n",
    "\n",
    "grid_search.fit(feature_train, target_train)\n",
    "\n",
    "best_estimator = grid_search.best_estimator_\n",
    "best_params = grid_search.best_params_\n",
    "\n",
    "print(\"Best hyperparameters: \",best_params)\n",
    "\n",
    "predictions = best_estimator.predict(feature_test)\n",
    "knn_acc = accuracy_score(target_test,predictions)\n",
    "print(confusion_matrix(target_test,predictions))\n",
    "print(knn_acc)\n",
    "print(classification_report(target_test,predictions))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69a824df",
   "metadata": {
    "papermill": {
     "duration": 0.012951,
     "end_time": "2024-05-06T16:16:24.519050",
     "exception": false,
     "start_time": "2024-05-06T16:16:24.506099",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Naive Bayes Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fcee1af2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:24.559440Z",
     "iopub.status.busy": "2024-05-06T16:16:24.557614Z",
     "iopub.status.idle": "2024-05-06T16:16:24.638518Z",
     "shell.execute_reply": "2024-05-06T16:16:24.635508Z"
    },
    "papermill": {
     "duration": 0.1064,
     "end_time": "2024-05-06T16:16:24.644119",
     "exception": false,
     "start_time": "2024-05-06T16:16:24.537719",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best hyperparameters:  {}\n",
      "[[15  0  0]\n",
      " [ 0 12  2]\n",
      " [ 0  0 16]]\n",
      "0.9555555555555556\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        15\n",
      "           1       1.00      0.86      0.92        14\n",
      "           2       0.89      1.00      0.94        16\n",
      "\n",
      "    accuracy                           0.96        45\n",
      "   macro avg       0.96      0.95      0.95        45\n",
      "weighted avg       0.96      0.96      0.96        45\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "\n",
    "feature_train , feature_test, target_train, target_test = train_test_split(X, y, test_size=0.3)\n",
    "\n",
    "gnb = GaussianNB()\n",
    "\n",
    "param_grid = {}\n",
    "\n",
    "grid_search = GridSearchCV(gnb, param_grid)\n",
    "grid_search.fit(feature_train, target_train)\n",
    "\n",
    "print(\"Best hyperparameters: \", grid_search.best_params_)\n",
    "\n",
    "best_gnb = grid_search.best_estimator_\n",
    "\n",
    "predictions = best_gnb.predict(feature_test)\n",
    "nbc_acc = accuracy_score(target_test,predictions)\n",
    "print(confusion_matrix(target_test,predictions))\n",
    "print(nbc_acc)\n",
    "print(classification_report(target_test,predictions))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6c88678",
   "metadata": {
    "papermill": {
     "duration": 0.012081,
     "end_time": "2024-05-06T16:16:24.670958",
     "exception": false,
     "start_time": "2024-05-06T16:16:24.658877",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7be5c7c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:24.700992Z",
     "iopub.status.busy": "2024-05-06T16:16:24.699836Z",
     "iopub.status.idle": "2024-05-06T16:16:25.448512Z",
     "shell.execute_reply": "2024-05-06T16:16:25.447205Z"
    },
    "papermill": {
     "duration": 0.767171,
     "end_time": "2024-05-06T16:16:25.451428",
     "exception": false,
     "start_time": "2024-05-06T16:16:24.684257",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best hyperparameters:  {'C': 1, 'gamma': 0.1, 'kernel': 'linear'}\n",
      "[[10  0  0]\n",
      " [ 0  9  0]\n",
      " [ 0  0 11]]\n",
      "1.0\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        10\n",
      "           1       1.00      1.00      1.00         9\n",
      "           2       1.00      1.00      1.00        11\n",
      "\n",
      "    accuracy                           1.00        30\n",
      "   macro avg       1.00      1.00      1.00        30\n",
      "weighted avg       1.00      1.00      1.00        30\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "\n",
    "feature_train , feature_test, target_train, target_test = train_test_split(X, y, test_size=0.2,random_state = 42)\n",
    "\n",
    "svm = SVC()\n",
    "\n",
    "param_grid = {'C': [0.1, 1, 10],\n",
    "              'gamma': [0.1, 1, 10],\n",
    "              'kernel': ['linear', 'rbf']}\n",
    "\n",
    "grid_search = GridSearchCV(svm, param_grid)\n",
    "grid_search.fit(feature_train, target_train)\n",
    "\n",
    "print(\"Best hyperparameters: \", grid_search.best_params_)\n",
    "\n",
    "best_svm = grid_search.best_estimator_\n",
    "\n",
    "predictions = best_svm.predict(feature_test)\n",
    "svm_acc = accuracy_score(target_test,predictions)\n",
    "print(confusion_matrix(target_test,predictions))\n",
    "print(svm_acc)\n",
    "print(classification_report(target_test,predictions))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f02ce9fa",
   "metadata": {
    "papermill": {
     "duration": 0.010435,
     "end_time": "2024-05-06T16:16:25.475114",
     "exception": false,
     "start_time": "2024-05-06T16:16:25.464679",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "54db0b93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:25.500977Z",
     "iopub.status.busy": "2024-05-06T16:16:25.500181Z",
     "iopub.status.idle": "2024-05-06T16:16:25.910238Z",
     "shell.execute_reply": "2024-05-06T16:16:25.908254Z"
    },
    "papermill": {
     "duration": 0.426083,
     "end_time": "2024-05-06T16:16:25.913125",
     "exception": false,
     "start_time": "2024-05-06T16:16:25.487042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Parameter with Grid Search: {'criterion': 'entropy', 'max_depth': 5}\n",
      "[[11  0  0]\n",
      " [ 0 13  0]\n",
      " [ 0  0  6]]\n",
      "1.0\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        11\n",
      "           1       1.00      1.00      1.00        13\n",
      "           2       1.00      1.00      1.00         6\n",
      "\n",
      "    accuracy                           1.00        30\n",
      "   macro avg       1.00      1.00      1.00        30\n",
      "weighted avg       1.00      1.00      1.00        30\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "\n",
    "param_grid={'criterion': ['gini', 'entropy'],\n",
    "            'max_depth': ['None', 5, 10, 15]\n",
    "            }\n",
    "\n",
    "\n",
    "tree=GridSearchCV(DecisionTreeClassifier(),param_grid,cv=10)\n",
    "\n",
    "feature_train , feature_test, target_train, target_test = train_test_split(X, y, test_size=0.2,random_state = 0)\n",
    "\n",
    "\n",
    "tree.fit(feature_train,target_train)\n",
    "#tree_predictons=tree.predict_proba(feature_test)[:,1]\n",
    "\n",
    "print(\"Best Parameter with Grid Search:\",tree.best_params_)\n",
    "\n",
    "best_dt = tree.best_estimator_\n",
    "\n",
    "predictions = best_dt.predict(feature_test)\n",
    "dt_acc = accuracy_score(target_test,predictions)\n",
    "\n",
    "print(confusion_matrix(target_test,predictions))\n",
    "print(dt_acc)\n",
    "print(classification_report(target_test, predictions))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eab198b5",
   "metadata": {
    "papermill": {
     "duration": 0.011147,
     "end_time": "2024-05-06T16:16:25.935051",
     "exception": false,
     "start_time": "2024-05-06T16:16:25.923904",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Random Forest"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1bd503f",
   "metadata": {
    "papermill": {
     "duration": 0.010834,
     "end_time": "2024-05-06T16:16:25.956739",
     "exception": false,
     "start_time": "2024-05-06T16:16:25.945905",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Boosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "cfe210b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:25.980222Z",
     "iopub.status.busy": "2024-05-06T16:16:25.979719Z",
     "iopub.status.idle": "2024-05-06T16:16:50.385681Z",
     "shell.execute_reply": "2024-05-06T16:16:50.383662Z"
    },
    "papermill": {
     "duration": 24.421656,
     "end_time": "2024-05-06T16:16:50.389216",
     "exception": false,
     "start_time": "2024-05-06T16:16:25.967560",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters found:  {'algorithm': 'SAMME', 'learning_rate': 0.1, 'n_estimators': 200}\n",
      "[[11  0  0]\n",
      " [ 0 13  0]\n",
      " [ 0  1  5]]\n",
      "0.9666666666666667\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        11\n",
      "           1       0.93      1.00      0.96        13\n",
      "           2       1.00      0.83      0.91         6\n",
      "\n",
      "    accuracy                           0.97        30\n",
      "   macro avg       0.98      0.94      0.96        30\n",
      "weighted avg       0.97      0.97      0.97        30\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "\n",
    "feature_train , feature_test, target_train, target_test = train_test_split(X, y, test_size=0.2)\n",
    "\n",
    "param_grid = {\n",
    "    'n_estimators': [50, 100, 200],\n",
    "    'learning_rate': [0.1, 0.01, 0.001],\n",
    "    'algorithm': ['SAMME', 'SAMME.R']\n",
    "}\n",
    "\n",
    "ada_classifier = AdaBoostClassifier()\n",
    "\n",
    "grid_search = GridSearchCV(ada_classifier, param_grid)\n",
    "\n",
    "grid_search.fit(feature_train,target_train)\n",
    "\n",
    "print(\"Best parameters found: \", grid_search.best_params_)\n",
    "\n",
    "prediction = grid_search.predict(feature_test)\n",
    "boost_acc = accuracy_score(target_test, prediction)\n",
    "\n",
    "print(confusion_matrix(target_test,prediction))\n",
    "\n",
    "print(boost_acc)\n",
    "\n",
    "print(classification_report(target_test, prediction))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65b38621",
   "metadata": {
    "papermill": {
     "duration": 0.011887,
     "end_time": "2024-05-06T16:16:50.412633",
     "exception": false,
     "start_time": "2024-05-06T16:16:50.400746",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Plot comparative graph for all ML Algorithms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7264d4d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:16:50.440049Z",
     "iopub.status.busy": "2024-05-06T16:16:50.439199Z",
     "iopub.status.idle": "2024-05-06T16:16:50.735671Z",
     "shell.execute_reply": "2024-05-06T16:16:50.734068Z"
    },
    "papermill": {
     "duration": 0.313272,
     "end_time": "2024-05-06T16:16:50.738771",
     "exception": false,
     "start_time": "2024-05-06T16:16:50.425499",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAArMAAAIjCAYAAAAQgZNYAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABkAklEQVR4nO3dd3gU1f7H8c+mhxRSCARCTCBIFUJHREEUBEUErnSkFxuKFFG8SihqlKuInQtKUUEQRK8/Ee8FBFTkipEAojQBKdJLAgRISPb8/sCMWVJIILAZ7/v1PDy63z0ze86cnd1PZmd2HcYYIwAAAMCGPNzdAQAAAOByEWYBAABgW4RZAAAA2BZhFgAAALZFmAUAAIBtEWYBAABgW4RZAAAA2BZhFgAAALZFmAUAAIBtEWYB4AodOnRInTt3Vnh4uBwOh6ZMmVJs6/7tt9/kcDg0a9Ysl/qXX36punXrys/PTw6HQykpKZKk999/X9WrV5e3t7dCQkKKrR//y8aNGyeHw6GjR49e9ceKjY1Vv379rvrjAH8lhFngL+6tt96Sw+FQkyZN3N2Vv6zhw4fr3//+t8aMGaP3339fbdu2zbetw+Gw/nl5eSksLEwNGjTQsGHD9MsvvxTq8Y4dO6auXbvK399fb775pt5//30FBARoy5Yt6tevn+Li4jR9+nRNmzatuIZY7H755ReNGzdOv/32W6HaZwdKDw8P7d27N9f9J0+elL+/vxwOh4YOHXpZfXr++ef16aefXtayANzHy90dAHB1zZkzR7GxsVq7dq1+/fVXValSxd1d+sv56quv1KFDB40aNapQ7Vu3bq0+ffrIGKPU1FRt2LBBs2fP1ltvvaUXX3xRI0aMsNrGxMTo7Nmz8vb2tmo//PCDTp06pYkTJ6pVq1ZWfeXKlXI6nXr11VdL/Dz/8ssvGj9+vG699VbFxsYWejlfX199+OGHGj16tEt90aJFV9yn559/Xp07d1bHjh2veF0Arh2OzAJ/Ybt27dJ3332nyZMnKyIiQnPmzHF3l/KVlpbm7i5ctsOHDxfpI/2qVavqvvvuU+/evTV06FBNnz5dO3bsUKNGjTRy5Eh98cUXVluHwyE/Pz95enq6PJ6kXI+ZX/1KlLR5ueuuu/Thhx/mqs+dO1ft2rVzQ48AuBthFvgLmzNnjkJDQ9WuXTt17tw53zCbkpKi4cOHKzY2Vr6+vqpYsaL69Onjco7guXPnNG7cOFWtWlV+fn4qX768/va3v2nHjh2SLhwVdDgcWrlypcu68zrns1+/fgoMDNSOHTt01113KSgoSL169ZIkffPNN+rSpYuuu+46+fr6Kjo6WsOHD9fZs2dz9XvLli3q2rWrIiIi5O/vr2rVqunvf/+7JGnFihVyOBz65JNPci03d+5cORwOrVmzpsDtt3PnTnXp0kVhYWEqVaqUbrzxRi1evNi6f9asWXI4HDLG6M0337ROH7gc4eHhmjdvnry8vPTcc89Z9Yu336233qq+fftKkho1aiSHw6F+/fopNjZWCQkJkqSIiAg5HA6NGzfOWs+SJUt0yy23KCAgQEFBQWrXrp1+/vlnlz4UNC9Op1NTpkxRrVq15Ofnp3Llyun+++/XiRMnXNYRGxuru+++W99++60aN24sPz8/Va5cWe+9957LduvSpYskqWXLltZ2u/i5k5eePXtq/fr12rJli1U7ePCgvvrqK/Xs2TPPZdLT05WQkKAqVapYz6nRo0crPT3dauNwOJSWlqbZs2db/bn43NWUlBT169dPISEhKl26tPr3768zZ864tMnMzNTEiRMVFxcnX19fxcbG6qmnnnJ5LEkyxujZZ59VxYoVVapUKbVs2TLXfEjS+fPnNX78eF1//fXy8/NTeHi4br75Zi1duvSS2wr4X8FpBsBf2Jw5c/S3v/1NPj4+6tGjh95++2398MMPatSokdXm9OnTuuWWW7R582YNGDBA9evX19GjR/XZZ59p3759KlOmjLKysnT33Xdr+fLl6t69u4YNG6ZTp05p6dKl2rRpk+Li4orct8zMTLVp00Y333yzXnrpJZUqVUqStGDBAp05c0YPPvigwsPDtXbtWr3++uvat2+fFixYYC2/ceNG3XLLLfL29taQIUMUGxurHTt26P/+7//03HPP6dZbb1V0dLTmzJmjTp065doucXFxatq0ab79O3TokG666SadOXNGjz76qMLDwzV79mzdc889WrhwoTp16qTmzZvr/fffV+/eva1TB67EddddpxYtWmjFihU6efKkgoODc7X5+9//rmrVqmnatGmaMGGCKlWqpLi4OHXs2FHvvfeePvnkE7399tsKDAxUnTp1JF24KKxv375q06aNXnzxRZ05c0Zvv/22br75ZiUnJ7t8zJ/fvNx///2aNWuW+vfvr0cffVS7du3SG2+8oeTkZK1evdrlNIhff/1VnTt31sCBA9W3b1/NmDFD/fr1U4MGDVSrVi01b95cjz76qF577TU99dRTqlGjhiRZ/y1I8+bNVbFiRc2dO1cTJkyQJM2fP1+BgYF5Hpl1Op2655579O2332rIkCGqUaOGfvrpJ73yyivatm2bdY7s+++/r0GDBqlx48YaMmSIJOV6Xnft2lWVKlVSYmKi1q1bp3feeUdly5bViy++aLUZNGiQZs+erc6dO2vkyJH6/vvvlZiYqM2bN7v8YTV27Fg9++yzuuuuu3TXXXdp3bp1uuOOO5SRkeHymOPGjVNiYqLVt5MnTyopKUnr1q1T69atL7m9gP8JBsBfUlJSkpFkli5daowxxul0mooVK5phw4a5tBs7dqyRZBYtWpRrHU6n0xhjzIwZM4wkM3ny5HzbrFixwkgyK1ascLl/165dRpKZOXOmVevbt6+RZJ588slc6ztz5kyuWmJionE4HGb37t1WrXnz5iYoKMillrM/xhgzZswY4+vra1JSUqza4cOHjZeXl0lISMj1ODk99thjRpL55ptvrNqpU6dMpUqVTGxsrMnKyrLqkszDDz9c4PoK23bYsGFGktmwYYMxJu/tN3PmTCPJ/PDDDy7LJiQkGEnmyJEjLn0OCQkxgwcPdml78OBBU7p0aZd6fvPyzTffGElmzpw5LvUvv/wyVz0mJsZIMl9//bVVO3z4sPH19TUjR460agsWLMjz+ZKfnGMbNWqUqVKlinVfo0aNTP/+/Y0xubfv+++/bzw8PFzm0Rhjpk6daiSZ1atXW7WAgADTt2/ffB97wIABLvVOnTqZ8PBw6/b69euNJDNo0CCXdqNGjTKSzFdffWVtDx8fH9OuXTuX5+tTTz1lJLn0IT4+3rRr1+5Smwf4n8ZpBsBf1Jw5c1SuXDm1bNlS0oWPUbt166Z58+YpKyvLavfxxx8rPj4+19HL7GWy25QpU0aPPPJIvm0ux4MPPpir5u/vb/1/Wlqajh49qptuuknGGCUnJ0uSjhw5oq+//loDBgzQddddl29/+vTpo/T0dC1cuNCqzZ8/X5mZmbrvvvsK7NsXX3yhxo0b6+abb7ZqgYGBGjJkiH777bdCf/NAUQUGBkqSTp06VSzrW7p0qVJSUtSjRw8dPXrU+ufp6akmTZpoxYoVuZa5eF4WLFig0qVLq3Xr1i7raNCggQIDA3Oto2bNmrrlllus2xEREapWrZp27txZLGPq2bOnfv31V/3www/Wf/M7xWDBggWqUaOGqlev7tL32267TZLyHH9+HnjgAZfbt9xyi44dO6aTJ09KknWuc84L+CRp5MiRkmSdorJs2TJlZGTokUcecXm+PvbYY7keMyQkRD///LO2b99e6H4C/2s4zQD4C8rKytK8efPUsmVL7dq1y6o3adJEL7/8spYvX6477rhDkrRjxw7de++9Ba5vx44dqlatmry8iu8lw8vLSxUrVsxV37Nnj8aOHavPPvss1/mYqampkmSFohtuuKHAx6hevboaNWqkOXPmaODAgZIuhPwbb7zxklf77969O8+vM8v+KHz37t2XfPzLcfr0aUlSUFBQsawvOwRlh7eLXXwqQ17zsn37dqWmpqps2bJ5riP7wrNsF/+BIUmhoaG55vNy1atXT9WrV9fcuXMVEhKiyMjIfMe3fft2bd68WREREXnef3HfC3LxuEJDQyVJJ06cUHBwsHbv3i0PD49cz63IyEiFhIRo9+7dkmT99/rrr3dpFxERYa0z24QJE9ShQwdVrVpVN9xwg9q2bavevXtbp5AAIMwCf0lfffWVDhw4oHnz5mnevHm57p8zZ44VZotLfkdocx4FzsnX11ceHh652rZu3VrHjx/XE088oerVqysgIEC///67+vXrJ6fTWeR+9enTR8OGDdO+ffuUnp6u//73v3rjjTeKvJ5rZdOmTfL09FSlSpWKZX3Z2+z9999XZGRkrvsv/gMlr3lxOp0qW7ZsvhcQXhwUc37zQk7GmEL3+1J69uypt99+W0FBQerWrVuuPmdzOp2qXbu2Jk+enOf90dHRhX7Mwo7rSj6tuFjz5s21Y8cO/etf/9J//vMfvfPOO3rllVc0depUDRo0qNgeB7AzwizwFzRnzhyVLVtWb775Zq77Fi1apE8++URTp06Vv7+/4uLitGnTpgLXFxcXp++//17nz593udAnp+wjStm/RJUt+yhUYfz000/atm2bZs+e7XIx1cVXbleuXFmSLtlvSerevbtGjBihDz/80Pq+1m7dul1yuZiYGG3dujVXPfsq+piYmEuuo6j27NmjVatWqWnTpsV2ZDb7IqayZcu6fCdtUdexbNkyNWvWzOU0kCtxpYGvZ8+eGjt2rA4c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XQQAAEAx2bt3rypWrFhgG1uF2csxZswYjRgxwrqdmpqq6667Trt27VJwcLAkycPDQx4eHnI6nXI6nVbb7HpWVpbL72fnV/f09JTD4VBmZqZLH17blCJJchinS904PPKue3hKxrjWHY4L7fOtO+XI+Xv2DodUQN1hnJJL3UNyOPKvO7MK1/diHNNjtUPznI+rNU+enp6SpKysrELVvby8ZIxxqTscDnl6eubqY351xsSYrvWYXv/puKS/xmvEtXzde6R2WLHN06ubUkrEmKy67DFPw24IKXH7U7a/0mtESRnTiRMnVKlSJQUFBelSbBVmIyMjdejQIZfaoUOHFBwcnOdRWUny9fWVr69vrnpYWJgVZq82vyDnpRshl5CQEHd3AfjL8Q3m9ehyhIWFFdu6/AKzLt0IuYSGhrq7C7iGsk8FLcwpobb6ntmmTZtq+fLlLrWlS5eqadOmbuoRAAAA3MmtYfb06dNav3691q9fL+nCV2+tX79ee/bskXThFIGcPz/5wAMPaOfOnRo9erS2bNmit956Sx999JGGDx/uju4DAADAzdwaZpOSklSvXj3Vq1dPkjRixAjVq1dPY8eOlSQdOHDACraSVKlSJS1evFhLly5VfHy8Xn75Zb3zzjtq06aNW/oPAAAA93LrObO33nqrCvqa27x+3evWW29VcnLyVewVAAAA7MJW58wCAAAAORFmAQAAYFuEWQAAANiWrb5nFrgSLyQfdXcXbOfJemXc3QUAAArEkVkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbXAAGAAD+p3BB8OUpqRcFc2QWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFheAAbhmuOji8pTUiy4AoCTgyCwAAABsizALAAAA2yLMAgAAwLYIswAAALAtwiwAAABsizALAAAA2yLMAgAAwLYIswAAALAtwiwAAABsizALAAAA2yLMAgAAwLYIswAAALAtwiwAAABsizALAAAA2yLMAgAAwLYIswAAALAtwiwAAABsizALAAAA2yLMAgAAwLYIswAAALAtwiwAAABsizALAAAA2yLMAgAAwLYIswAAALAtwiwAAABsizALAAAA2yLMAgAAwLYIswAAALAtwiwAAABsizALAAAA2yLMAgAAwLYIswAAALAtwiwAAABsizALAAAA2yLMAgAAwLYIswAAALAtwiwA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fe65tnfvPOXcplecjS6znpfcr3jXiI+Pjxo0aKDly5dbNafTqeXLl7scqc2pWbNm+vXXX12OOmzbtk3ly5fPM8gCAADgr81tYVaSRowYoenTp2v27NnavHmzHnzwQaWlpVnfbtCnTx+XC8QefPBBHT9+XMOGDdO2bdu0ePFiPf/883r44YfdNQQAAAC4kVu/mqtbt246cuSIxo4dq4MHD6pu3br68ssvrYvC9uzZ4/JxWXR0tP79739r+PDhqlOnjqKiojRs2DA98cQT7hoCAAAA3MitYVaShg4dqqFDh+Z538qVK3PVmjZtqv/+979XuVcAAACwA7eeZgAAAABcCcIsAAAAbIswCwAAANsizAIAAMC2CLMAAACwLcIsAAAAbIswCwAAANsizAIAAMC2CLMAAACwLcIsAAAAbKvIYTY2NlYTJkzQnj17rkZ/AAAAgEIrcph97LHHtGjRIlWuXFmtW7fWvHnzlJ6efjX6BgAAABTossLs+vXrtXbtWtWoUUOPPPKIypcvr6FDh2rdunVXo48AAABAni77nNn69evrtdde0/79+5WQkKB33nlHjRo1Ut26dTVjxgwZY4qznwAAAEAuXpe74Pnz5/XJJ59o5syZWrp0qW688UYNHDhQ+/bt01NPPaVly5Zp7ty5xdlXAAAAwEWRw+y6des0c+ZMffjhh/Lw8FCfPn30yiuvqHr16labTp06qVGjRsXaUQAAAOBiRQ6zjRo1UuvWrfX222+rY8eO8vb2ztWmUqVK6t69e7F0EAAAAMhPkcPszp07FRMTU2CbgIAAzZw587I7BQAAABRGkS8AO3z4sL7//vtc9e+//15JSUnF0ikAAACgMIocZh9++GHt3bs3V/3333/Xww8/XCydAgAAAAqjyGH2l19+Uf369XPV69Wrp19++aVYOgUAAAAURpHDrK+vrw4dOpSrfuDAAXl5XfY3fQEAAABFVuQwe8cdd2jMmDFKTU21aikpKXrqqafUunXrYu0cAAAAUJAiH0p96aWX1Lx5c8XExKhevXqSpPXr16tcuXJ6//33i72DAAAAQH6KHGajoqK0ceNGzZkzRxs2bJC/v7/69++vHj165PmdswAAAMDVclknuQYEBGjIkCHF3RcAAACgSC77iq1ffvlFe/bsUUZGhkv9nnvuueJOAQAAAIVxWb8A1qlTJ/30009yOBwyxkiSHA6HJCkrK6t4ewgAAADko8jfZjBs2DBVqlRJhw8fVqlSpfTzzz/r66+/VsOGDbVy5cqr0EUAAAAgb0U+MrtmzRp99dVXKlOmjDw8POTh4aGbb75ZiYmJevTRR5WcnHw1+gkAAADkUuQjs1lZWQoKCpIklSlTRvv375ckxcTEaOvWrcXbOwAAAKAART4ye8MNN2jDhg2qVKmSmjRpokmTJsnHx0fTpk1T5cqVr0YfAQAAgDwVOcw+/fTTSktLkyRNmDBBd999t2655RaFh4dr/vz5xd5BAAAAID9FDrNt2rSx/r9KlSrasmWLjh8/rtDQUOsbDQAAAIBroUjnzJ4/f15eXl7atGmTSz0sLIwgCwAAgGuuSGHW29tb1113Hd8lCwAAgBKhyN9m8Pe//11PPfWUjh8/fjX6AwAAABRakc+ZfeONN/Trr7+qQoUKiomJUUBAgMv969atK7bOAQAAAAUpcpjt2LHjVegGAAAAUHRFDrMJCQlXox8AAABAkRX5nFkAAACgpCjykVkPD48Cv4aLbzoAAADAtVLkMPvJJ5+43D5//rySk5M1e/ZsjR8/vtg6BgAAAFxKkcNshw4dctU6d+6sWrVqaf78+Ro4cGCxdAwAAAC4lGI7Z/bGG2/U8uXLi2t1AAAAwCUVS5g9e/asXnvtNUVFRRXH6gAAAIBCKfJpBqGhoS4XgBljdOrUKZUqVUoffPBBsXYOAAAAKEiRw+wrr7ziEmY9PDwUERGhJk2aKDQ0tFg7BwAAABSkyGG2X79+V6EbAAAAQNEV+ZzZmTNnasGCBbnqCxYs0OzZs4ulUwAAAEBhFDnMJiYmqkyZMrnqZcuW1fPPP18snQIAAAAKo8hhds+ePapUqVKuekxMjPbs2VMsnQIAAAAKo8hhtmzZstq4cWOu+oYNGxQeHl4snQIAAAAKo8hhtkePHnr00Ue1YsUKZWVlKSsrS1999ZWGDRum7t27X40+AgAAAHkq8rcZTJw4Ub/99ptuv/12eXldWNzpdKpPnz6cMwsAAIBrqshh1sfHR/Pnz9ezzz6r9evXy9/fX7Vr11ZMTMzV6B8AAACQryKH2WzXX3+9rr/++uLsCwAAAFAkRT5n9t5779WLL76Yqz5p0iR16dKlWDoFAAAAFEaRw+zXX3+tu+66K1f9zjvv1Ndff10snQIAAAAKo8hh9vTp0/Lx8clV9/b21smTJ4ulUwAAAEBhFDnM1q5dW/Pnz89VnzdvnmrWrFksnQIAAAAKo8gXgD3zzDP629/+ph07dui2226TJC1fvlxz587VwoULi72DAAAAQH6KHGbbt2+vTz/9VM8//7wWLlwof39/xcfH66uvvlJYWNjV6CMAAACQp8v6aq527dqpXbt2kqSTJ0/qww8/1KhRo/Tjjz8qKyurWDsIAAAA5KfI58xm+/rrr9W3b19VqFBBL7/8sm677Tb997//Lc6+AQAAAAUq0pHZgwcPatasWXr33Xd18uRJde3aVenp6fr000+5+AsAAADXXKGPzLZv317VqlXTxo0bNWXKFO3fv1+vv/761ewbAAAAUKBCH5ldsmSJHn30UT344IP8jC0AAABKhEIfmf3222916tQpNWjQQE2aNNEbb7yho0ePXs2+AQAAAAUqdJi98cYbNX36dB04cED333+/5s2bpwoVKsjpdGrp0qU6derU1ewnAAAAkEuRv80gICBAAwYM0LfffquffvpJI0eO1AsvvKCyZcvqnnvuuRp9BAAAAPJ02V/NJUnVqlXTpEmTtG/fPn344YfF1ScAAACgUK4ozGbz9PRUx44d9dlnnxXH6gAAAIBCKZYwCwAAALgDYRYAAAC2RZgFAACAbRFmAQAAYFuEWQAAANgWYRYAAAC2RZgFAACAbRFmAQAAYFslIsy++eabio2NlZ+fn5o0aaK1a9cWarl58+bJ4XCoY8eOV7eDAAAAKJHcHmbnz5+vESNGKCEhQevWrVN8fLzatGmjw4cPF7jcb7/9plGjRumWW265Rj0FAABASeP2MDt58mQNHjxY/fv3V82aNTV16lSVKlVKM2bMyHeZrKws9erVS+PHj1flypWvYW8BAABQkni588EzMjL0448/asyYMVbNw8NDrVq10po1a/JdbsKECSpbtqwGDhyob775psDHSE9PV3p6unX75MmTkqTMzExlZmZaj+nh4SGn0ymn0+nSFw8PD2VlZckYc8m6p6enHA6HtV7LH20cxuladnjkXffwlIxxrTscF9rnW3fKkaMvxuGQCqg7jNPql9UXhyP/ujOrcH0vxjHlNx+XO0/ZY3DnmOw2T5mZmXI4HPL09My13fOrFzRP1mOW8OdeSZuni19TvLy8ZIxRVtaf6ynsPP25H5Ts594fnS8x85SZmSlPT09JctnukvKt5zdPFx7E/WOy6rLHPBX2Pbcw85RzO5T0555Vl/vnKTMzs9iy0aXmKVeWKoBbw+zRo0eVlZWlcuXKudTLlSunLVu25LnMt99+q3fffVfr168v1GMkJiZq/PjxuerJyckKCAiQJEVERCguLk67du3SkSNHrDYVK1ZUxYoVtW3bNqWmplr1ypUrq2zZstq0aZPOnj1r1atXr66QkBAlJye7TI6XZ7SyPLwUdXSrSx9+L1NNns5MRR7fYdWMh4d+L1NdfufTVCZlj1XP9PLVwbA4BZxLUeipA1b9nE+AjobEKPjMMQWn/dn3NP8QnQiqoNDTBxVwNsWqnwyI0MmACIWn7pVfRppVPxFUXmn+oSp3Ype8Mv8M/0dDrtM5n0BVOL5djhxvkAfD4q76mPbv3699+/ZZ9Sudp6jUDLePyW7zlJTkI39/f8XHx+vo0aPauXOn1b506dKqUaNGkeZJ8nP7mCT7zVNSUpJV8/T0VKNGjZSamuryOlnYecreD9w9JrvNU1KSj+rUqSMfHx+X+ZCkhg0bKiMjQxs3bizUPElRJWJMkr3mqbDvuYWZp+z9wN1jsts8JSX5FFs2utQ8JScnq7AcJmd8vsb279+vqKgofffdd2ratKlVHz16tFatWqXvv//epf2pU6dUp04dvfXWW7rzzjslSf369VNKSoo+/fTTPB8jryOz0dHROnbsmIKDgyVd/SOzL208Icn9f1HlrNvhr8TR8WHFemT25Q3H3D4mu83TyPjwYj0yO2nDcbeP6Y/O22qeRtUJdalfyZHZP/eDkv3c+6PzJWaeRsaHF9uR2X9sPFEixmTVZY95erxOaLEdmc3eD9w9JrvN08j48Gt2ZPbEiRMKDw9Xamqqldfy49Yjs2XKlJGnp6cOHTrkUj906JAiIyNztd+xY4d+++03tW/f3qplv2h7eXlp69atiouLc1nG19dXvr6+udbl5eUlLy/X4WdPxMWyN2xh6xevV398rGQcebfPs+5wFLHuIePIY+X51C/sMEWoexSh7/nVizim/Objcufp4jG4Y0x2m6ecz+Wizkd+dXePqXD1kjVPuV5TdCEU5VW/1HzkeuwS+twrXP3azVPObZ3Xds+vnt88lYQxubYv+fNU6PfcQtRz7wcl97nn2t6985Rzm15xNrrMel5yv+JdQz4+PmrQoIGWL19u1ZxOp5YvX+5ypDZb9erV9dNPP2n9+vXWv3vuuUctW7bU+vXrFR0dfS27DwAAADdz65FZSRoxYoT69u2rhg0bqnHjxpoyZYrS0tLUv39/SVKfPn0UFRWlxMRE+fn56YYbbnBZPiQkRJJy1QEAAPDX5/Yw261bNx05ckRjx47VwYMHVbduXX355ZfWRWF79uzJ8yMzAAAAwO1hVpKGDh2qoUOH5nnfypUrC1x21qxZxd8hAAAA2AKHPAEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbJSLMvvnmm4qNjZWfn5+aNGmitWvX5tt2+vTpuuWWWxQaGqrQ0FC1atWqwPYAAAD463J7mJ0/f75GjBihhIQErVu3TvHx8WrTpo0OHz6cZ/uVK1eqR48eWrFihdasWaPo6Gjdcccd+v33369xzwEAAOBubg+zkydP1uDBg9W/f3/VrFlTU6dOValSpTRjxow828+ZM0cPPfSQ6tatq+rVq+udd96R0+nU8uXLr3HPAQAA4G5e7nzwjIwM/fjjjxozZoxV8/DwUKtWrbRmzZpCrePMmTM6f/68wsLC8rw/PT1d6enp1u2TJ09KkjIzM5WZmWk9poeHh5xOp5xOp0tfPDw8lJWVJWPMJeuenp5yOBzWei1/tHEYp2vZ4ZF33cNTMsa17nBcaJ9v3SlHjr4Yh0MqoO4wTqtfVl8cjvzrzqzC9b0Yx5TffFzuPGWPwZ1jsts8ZWZmyuFwyNPTM9d2z69e0DxZj1nCn3slbZ4ufk3x8vKSMUZZWX+up7Dz9Od+ULKfe390vsTMU2Zmpjw9PSXJZbtLyree3zxdeBD3j8mqyx7zVNj33MLMU87tUNKfe1Zd7p+nzMzMYstGl5qnXFmqAG4Ns0ePHlVWVpbKlSvnUi9Xrpy2bNlSqHU88cQTqlChglq1apXn/YmJiRo/fnyuenJysgICAiRJERERiouL065du3TkyBGrTcWKFVWxYkVt27ZNqampVr1y5coqW7asNm3apLNnz1r16tWrKyQkRMnJyS6T4+UZrSwPL0Ud3erSh9/LVJOnM1ORx3dYNePhod/LVJff+TSVSdlj1TO9fHUwLE4B51IUeuqAVT/nE6CjITEKPnNMwWl/9j3NP0Qngioo9PRBBZxNseonAyJ0MiBC4al75ZeRZtVPBJVXmn+oyp3YJa/MP8P/0ZDrdM4nUBWOb5cjxxvkwbC4qz6m/fv3a9++fVb9SucpKjXD7WOy2zwlJfnI399f8fHxOnr0qHbu3Gm1L126tGrUqFGkeZL83D4myX7zlJSUZNU8PT3VqFEjpaamurxOFnaesvcDd4/JbvOUlOSjOnXqyMfHx2U+JKlhw4bKyMjQxo0bCzVPUlSJGJNkr3kq7HtuYeYpez9w95jsNk9JST7Flo0uNU/JyckqLIfJGZ+vsf379ysqKkrfffedmjZtatVHjx6tVatW6fvvvy9w+RdeeEGTJk3SypUrVadOnTzb5HVkNjo6WseOHVNwcLCkq39k9qWNJyS5/y+qnHU7/JU4Oj6sWI/MvrzhmNvHZLd5GhkfXqxHZidtOO72Mf3ReVvN06g6oS71Kzky++d+ULKfe390vsTM08j48GI7MvuPjSdKxJisuuwxT4/XCS22I7PZ+4G7x2S3eRoZH37NjsyeOHFC4eHhSk1NtfJaftx6ZLZMmTLy9PTUoUOHXOqHDh1SZGRkgcu+9NJLeuGFF7Rs2bJ8g6wk+fr6ytfXN1fdy8tLXl6uw8+eiItlb9jC1i9er/74WMk48m6fZ93hKGLdQ8aRx8rzqV/YYYpQ9yhC3/OrF3FM+c3H5c7TxWNwx5jsNk85n8tFnY/86u4eU+HqJWuecr2m6EIoyqt+qfnI9dgl9LlXuPq1m6ec2zqv7Z5fPb95Kgljcm1f8uep0O+5hajn3g9K7nPPtb175ynnNr3ibHSZ9bzkfsW7hnx8fNSgQQOXi7eyL+bKeaT2YpMmTdLEiRP15ZdfqmHDhteiqwAAACiB3HpkVpJGjBihvn37qmHDhmrcuLGmTJmitLQ09e/fX5LUp08fRUVFKTExUZL04osvauzYsZo7d65iY2N18OBBSVJgYKACAwPdNg4AAABce24Ps926ddORI0c0duxYHTx4UHXr1tWXX35pXRS2Z88el4/M3n77bWVkZKhz584u60lISNC4ceOuZdcBAADgZm4Ps5I0dOhQDR06NM/7Vq5c6XL7t99+u/odAgAAgC249ZxZAAAA4EoQZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbhFkAAADYFmEWAAAAtkWYBQAAgG0RZgEAAGBbJSLMvvnmm4qNjZWfn5+aNGmitWvXFth+wYIFql69uvz8/FS7dm198cUX16inAAAAKEncHmbnz5+vESNGKCEhQevWrVN8fLzatGmjw4cP59n+u+++U48ePTRw4EAlJyerY8eO6tixozZt2nSNew4AAAB3c3uYnTx5sgYPHqz+/furZs2amjp1qkqVKqUZM2bk2f7VV19V27Zt9fjjj6tGjRqaOHGi6tevrzfeeOMa9xwAAADu5uXOB8/IyNCPP/6oMWPGWDUPDw+1atVKa9asyXOZNWvWaMSIES61Nm3a6NNPP82zfXp6utLT063bqampkqTjx48rMzPTekwPDw85nU45nU6Xvnh4eCgrK0vGmEvWPT095XA4rPVmO3fqpCTJYZwudePwyLvu4SkZ41p3OC60z7fulCNHX4zDIRVQdxin5FL3kByO/OvOrML1vRjHlJLiled8XO48pZ9McfuY7DZPx497yOFwyNPTM9d2z69e0DydO33K7WP6o/O2mqfjx12PO3h5eckYo6ysP9dT2Hn6cz8o2c+9PzpfYubp+HEPeXp6SpLLdpeUbz2/eTp3+lSJGJNVlz3m6cQJz0K95xZmnrL3A3ePyW7zdPy4R7Flo0vN04kTJy70I8e68uPWMHv06FFlZWWpXLlyLvVy5cppy5YteS5z8ODBPNsfPHgwz/aJiYkaP358rnqlSpUus9e4VnLPGq61ce7uACSxL5QE49zdAbAflADj3PCYp06dUunSpQts49Ywey2MGTPG5Uiu0+nU8ePHFR4eLofD4caeud/JkycVHR2tvXv3Kjg42N3d+Z/FPLgfc+B+zIH7MQfuxxz8yRijU6dOqUKFCpds69YwW6ZMGXl6eurQoUMu9UOHDikyMjLPZSIjI4vU3tfXV76+vi61kJCQy+/0X1BwcPD//E5TEjAP7sccuB9z4H7MgfsxBxdc6ohsNrdeAObj46MGDRpo+fLlVs3pdGr58uVq2rRpnss0bdrUpb0kLV26NN/2AAAA+Oty+2kGI0aMUN++fdWwYUM1btxYU6ZMUVpamvr37y9J6tOnj6KiopSYmChJGjZsmFq0aKGXX35Z7dq107x585SUlKRp06a5cxgAAABwA7eH2W7duunIkSMaO3asDh48qLp16+rLL7+0LvLas2ePPDz+PIB80003ae7cuXr66af11FNP6frrr9enn36qG264wV1DsC1fX18lJCTkOg0D1xbz4H7MgfsxB+7HHLgfc3B5HKYw33kAAAAAlEBu/9EEAAAA4HIRZgEAAGBbhFkAAADYFmH2GoiNjdWUKVMue/lZs2bx3biSVq5cKYfDoZSUFHd3BW5066236rHHHnN3N4ASpyjvNVf6vgT3GjdunOrWrevubpQcBqZv376mQ4cOV239hw8fNmlpaYVqGxMTY1555RWX2pkzZ8yhQ4cK/XgtWrQwkowk4+vra66//nrz/PPPG6fTWZRulzjp6enmwIEDJXoceT2XFixYYHx9fc1LL71k+vbtaySZxMRElzaffPKJybk7rlixwkgyNWvWNJmZmS5tS5cubWbOnHm1hnDVFHbsl3Ls2DFz8uTJYu1b9v4iyXh6epro6GgzfPhwc+7cuWJ9nP8lhw8fNg888ICJjo42Pj4+ply5cuaOO+4wK1euNOHh4bmeB9kmTJhgypYtazIyMszMmTONJFO9evVc7T766CMjycTExFzlkVy57Oe+JOPl5WXKli1rWrVqZd59912TlZVVbI9TlPeaorQtjJz7UF7/EhISiu2xrqWccyfJhIWFmTZt2pgNGzZcsz5IMp988olL7dSpU+bo0aPXrA8lHUdmr4GIiAiVKlXqspf39/dX2bJli7TM4MGDdeDAAW3dulVjxozR2LFjNXXq1MvuQ2FkZGRc1fX7+PgoMjLSVj9D/M4776hXr156++23NXLkSEmSn5+fXnzxRZ04ceKSy+/cuVPvvffe1e7mNVOUsecnLCxMQUFBxdirC2bOnKkDBw5o165deuutt/T+++/r2WefLfbH+V9x7733Kjk5WbNnz9a2bdv02Wef6dZbb1Vqaqruu+8+zZw5M9cyxhjNmjVLffr0kbe3tyQpICBAhw8f1po1a1zavvvuu7ruuuuuyViKQ9u2bXXgwAH99ttvWrJkiVq2bKlhw4bp7rvvVmZmZrE8RlHea670feliBw4csP5NmTJFwcHBLrVRo0ZZbY0xxTbmayF77g4cOKDly5fLy8tLd999t1v7FBgYqPDwcLf2oSQhzF7CqlWr1LhxY/n6+qp8+fJ68sknXXbCU6dOqVevXgoICFD58uX1yiuv5PoYNOfHOcYYjRs3Ttddd518fX1VoUIFPfroo5IufHy6e/duDR8+XA6HwwpteZ1m8H//939q1KiR/Pz8VKZMGXXq1Mnl/lKlSikyMlIxMTHq37+/6tSpo6VLl1r3p6ena9SoUYqKilJAQICaNGmilStXuqxj+vTpio6OVqlSpdSpUydNnjzZpR/ZH3O88847qlSpkvz8/CRJKSkpGjRokCIiIhQcHKzbbrtNGzZssJbbsGGDWrZsqaCgIAUHB6tBgwZKSkqSJO3evVvt27dXaGioAgICVKtWLX3xxReS8j7N4OOPP1atWrXk6+ur2NhYvfzyyy5jiI2N1fPPP68BAwYoKChI11133TX7gY1JkybpkUce0bx586wfAZGkVq1aKTIy0vohkII88sgjSkhIUHp6+tXs6jVzqbEfO3ZMPXr0UFRUlEqVKqXatWvrww8/dGmTc/966qmn1KRJk1zriY+P14QJE6zb77zzjmrUqCE/Pz9Vr15db731Vq5lQkJCFBkZqejoaN19993q0KGD1q1bZ92/Y8cOdejQQeXKlVNgYKAaNWqkZcuWWfdPmDAhz++7rlu3rp555plC9SUjI0NDhw5V+fLl5efnp5iYmEI9T0qalJQUffPNN3rxxRfVsmVLxcTEqHHjxhozZozuueceDRw4UNu2bdO3337rstyqVau0c+dODRw40Kp5eXmpZ8+emjFjhlXbt2+fVq5cqZ49e16zMV0pX19fRUZGKioqSvXr19dTTz2lf/3rX1qyZIlmzZol6dKvnVLBr/2Ffa+5uK104TvdO3TooMDAQAUHB6tr164uPx2f/Xr//vvvKzY2VqVLl1b37t116tQpSRd+aj77X+nSpeVwOKzbW7ZsUVBQkJYsWaIGDRrI19dX3377rZxOpxITE1WpUiX5+/srPj5eCxcudBnvpk2bdOeddyowMFDlypVT7969dfTo0eKYkkLLnrvIyEjVrVtXTz75pPbu3asjR45Ikn766Sfddttt8vf3V3h4uIYMGaLTp09byzudTk2YMEEVK1aUr6+v9X362Qra72NjYyVJnTp1ksPhsG5ffJpBv3791LFjR7300ksqX768wsPD9fDDD+v8+fNWmwMHDqhdu3by9/dXpUqVNHfu3L/M6SaE2QL8/vvvuuuuu9SoUSNt2LBBb7/9tt59912XozUjRozQ6tWr9dlnn2np0qX65ptvXN4AL/bxxx/rlVde0T//+U9t375dn376qWrXri1JWrRokSpWrKgJEyZYfwXmZfHixerUqZPuuusuJScna/ny5WrcuHGebY0x+uabb7Rlyxb5+PhY9aFDh2rNmjWaN2+eNm7cqC5duqht27bavn27JGn16tV64IEHNGzYMK1fv16tW7fWc889l2v9v/76qz7++GMtWrRI69evlyR16dJFhw8f1pIlS/Tjjz+qfv36uv3223X8+HFJUq9evVSxYkX98MMP+vHHH/Xkk09aR2Eefvhhpaen6+uvv9ZPP/2kF198UYGBgXmO7ccff1TXrl3VvXt3/fTTTxo3bpyeeeYZ640h28svv6yGDRsqOTlZDz30kB588EFt3bo1nxkqHk888YQmTpyozz//PNcfGp6ennr++ef1+uuva9++fQWu57HHHlNmZqZef/31q9nda+ZSYz937pwaNGigxYsXa9OmTRoyZIh69+6ttWvX5rm+Xr16ae3atdqxY4dV+/nnn7Vx40Yr6MyZM0djx47Vc889p82bN+v555/XM888o9mzZ+fbz23btumrr75yCcqnT5/WXXfdpeXLlys5OVlt27ZV+/bttWfPHknSgAEDtHnzZv3www/WMsnJydq4caP1x8yl+vLaa6/ps88+00cffaStW7dqzpw51puXnQQGBiowMFCffvppnn+I1a5dW40aNXIJqNKFo+M33XSTqlev7lIfMGCAPvroI505c0bShT/w27Zta/24jl3ddtttio+P16JFiyRd+rWzKK/9Bb3XXMzpdKpDhw46fvy4Vq1apaVLl2rnzp3q1q2bS7sdO3bo008/1eeff67PP/9cq1at0gsvvFDo8T755JN64YUXtHnzZtWpU0eJiYl67733NHXqVP38888aPny47rvvPq1atUrShXB/2223qV69ekpKStKXX36pQ4cOqWvXroV+zOJ2+vRpffDBB6pSpYrCw8OVlpamNm3aKDQ0VD/88IMWLFigZcuWaejQodYyr776ql5++WW99NJL2rhxo9q0aaN77rnHer8taL/Pfj3J/uQo5+vLxVasWKEdO3ZoxYoVmj17tmbNmuXyftinTx/t379fK1eu1Mcff6xp06bp8OHDxb+R3MGtJzmUEPmdM/vUU0+ZatWquZyj+eabb5rAwECTlZVlTp48aby9vc2CBQus+1NSUkypUqXMsGHDrFrO82BffvllU7VqVZORkZFnX/I6Z3bmzJmmdOnS1u2mTZuaXr165TueFi1aGG9vbxMQEGC8vb2NJOPn52dWr15tjDFm9+7dxtPT0/z+++8uy91+++1mzJgxxhhjunXrZtq1a+dyf69evVz6kZCQYLy9vc3hw4et2jfffGOCg4NznWsYFxdn/vnPfxpjjAkKCjKzZs3Ks++1a9c248aNy/O+7PNIT5w4YYwxpmfPnqZ169YubR5//HFTs2ZN63ZMTIy57777rNtOp9OULVvWvP3223k+xpXq27ev8fHxMZLM8uXL87w/+7l24403mgEDBhhj8j9n9sSJE2bq1KkmLCzMpKSkGGPsfc5sYcZ+sXbt2pmRI0dat1u0aOGyf8XHx5sJEyZYt8eMGWOaNGli3Y6LizNz5851WefEiRNN06ZNrdvZ+0hAQIDx9fU1kszdd9+d736arVatWub111+3bt95553mwQcftG4/8sgj5tZbby10Xx555BFz2223lejzwgtr4cKFJjQ01Pj5+ZmbbrrJjBkzxuU8w6lTp5rAwEBz6tQpY4wxJ0+eNKVKlTLvvPOO1Sbna1/dunXN7NmzjdPpNHFxceZf//qXeeWVV2xzzmx+12V069bN1KhRo1CvnZd67b/c95r//Oc/xtPT0+zZs8e6/+effzaSzNq1a40xF17vS5Uq5XK++uOPP+6yr2W7+D0r+/Xs008/tWrnzp0zpUqVMt99953LsgMHDjQ9evQwxlzYN+644w6X+/fu3Wskma1bt+a7HYpT3759jaenpwkICDABAQFGkilfvrz58ccfjTHGTJs2zYSGhprTp09byyxevNh4eHiYgwcPGmOMqVChgnnuuedc1tuoUSPz0EMPGWMuvd8rj3NmExISTHx8vEs/Y2JiXK6x6NKli+nWrZsxxpjNmzcbSeaHH36w7t++fbuRlCtz2BFHZguwefNmNW3a1OUczWbNmun06dPat2+fdu7cqfPnz7v8ZVy6dGlVq1Yt33V26dJFZ8+eVeXKlTV48GB98sknRT53aP369br99tsLbNOrVy+tX79eq1ev1p133qm///3vuummmyRd+EgkKytLVatWtY6gBAYGatWqVdYRrq1bt+b6iz+vIwAxMTGKiIiwbm/YsEGnT59WeHi4y7p37dplrXvEiBEaNGiQWrVqpRdeeMHlqNqjjz6qZ599Vs2aNVNCQoI2btyY7xg3b96sZs2audSaNWum7du3Kysry6rVqVPH+v/sj76u5l+jderUUWxsrBISElw+arrYiy++qNmzZ2vz5s0Frm/gwIEKDw/Xiy++WNxddZv8xp6VlaWJEyeqdu3aCgsLU2BgoP79739bRz/z0qtXL82dO1fShU8iPvzwQ/Xq1UuSlJaWph07dmjgwIEuz8dnn33W5XknSa+88orWr1+vDRs26PPPP9e2bdvUu3dv6/7Tp09r1KhRqlGjhkJCQhQYGKjNmze79G3w4MH68MMPde7cOWVkZGju3LkaMGBAofvSr18/rV+/XtWqVdOjjz6q//znP1ewld3r3nvv1f79+/XZZ5+pbdu2WrlyperXr28dKerRo4eysrL00UcfSZLmz58vDw+PXEcDsw0YMEAzZ87UqlWrlJaWprvuuutaDeWqMsbI4XAU6rWzMK/92YryXrN582ZFR0crOjraqtWsWVMhISEu+2hsbKzL+erly5cv0mtpw4YNrf//9ddfdebMGbVu3dplvO+995413g0bNmjFihUu92cftb94/72aWrZsqfXr12v9+vVau3at2rRpozvvvFO7d+/W5s2bFR8fr4CAAKt9s2bN5HQ6tXXrVp08eVL79+/P870qe9sW135fq1YteXp6Wrdzzs/WrVvl5eWl+vXrW/dXqVJFoaGhl/VYJY2XuzvwvyY6Olpbt27VsmXLtHTpUj300EP6xz/+oVWrVlkftV+Kv7//JduULl1aVapUkSR99NFHqlKlim688Ua1atVKp0+flqenp3788UeXJ76kfD/Sz0/OHVi68IZfvnz5XOffSrLOtx03bpx69uypxYsXa8mSJUpISNC8efPUqVMnDRo0SG3atNHixYv1n//8R4mJiXr55Zf1yCOPFKlfOV28XR0Oh5xO52Wv71KioqK0cOFCtWzZUm3bttWSJUvyvGCpefPmatOmjcaMGaN+/frluz4vLy8999xz6tevn8tHV3aW39j/8Y9/6NVXX9WUKVNUu3ZtBQQE6LHHHivw4sIePXroiSee0Lp163T27Fnt3bvXCkTZf0xMnz4917m1Fz/3IyMjrX2mWrVqOnXqlHr06KFnn31WVapU0ahRo7R06VK99NJLqlKlivz9/dW5c2eXvrVv316+vr765JNP5OPjo/Pnz6tz586F7kv9+vW1a9cuLVmyRMuWLVPXrl3VqlWrXOcR2oWfn59at26t1q1b65lnntGgQYOUkJCgfv36KTg4WJ07d9bMmTOtoNq1a9d8X4N69eql0aNHa9y4cerdu7e8vP4ab1+bN29WpUqVCvXaWZjX/mzF8V5zsSt9Lc35fpG9PyxevFhRUVEu7Xx9fa027du3z/MP+fLlyxf6ca9UQECA9dogXTjvvXTp0po+fXqxrL+49vtr/V5XknBktgA1atTQmjVrZIyxaqtXr1ZQUJAqVqyoypUry9vb2+UcltTUVG3btq3A9fr7+6t9+/Z67bXXtHLlSq1Zs0Y//fSTpAtX7Oc8qpiXOnXqaPny5YUeR2BgoIYNG6ZRo0bJGKN69eopKytLhw8fVpUqVVz+RUZGSrrwZn7xuTkFnauTrX79+jp48KC8vLxyrbtMmTJWu6pVq2r48OH6z3/+o7/97W8uVzZHR0frgQce0KJFizRy5Mh8XzBq1Kih1atXu9RWr16tqlWr5goq11pMTIxWrVqlgwcPqm3bttZFEhd74YUX9H//93+5rtS+WJcuXVSrVi2NHz/+anTXLfIa++rVq9WhQwfdd999io+PV+XKlS+5P1WsWFEtWrTQnDlzNGfOHLVu3dr69o9y5cqpQoUK2rlzZ67nY6VKlQpcb/Zz6OzZs1bf+vXrp06dOql27dqKjIzUb7/95rKMl5eX+vbtq5kzZ2rmzJnq3r27FUAK25fg4GB169ZN06dP1/z58/Xxxx9b50zaXc2aNZWWlmbdHjhwoL799lt9/vnn+u6771wu/LpYWFiY7rnnHq1atco62m13X331lX766Sfde++9hXrtLOprf0HvNTnVqFFDe/fu1d69e63aL7/8opSUFNWsWfPKB5qHmjVrytfXV3v27Mk13uwjxPXr19fPP/+s2NjYXG0uPpByLTkcDnl4eOjs2bOqUaOGNmzY4PK8Xr16tTw8PFStWjUFBwerQoUKeb5X5dy2Be333t7el8wFl1KtWjVlZmYqOTnZqv36669X9M0yJclf40/bYpCammpdwJRtyJAhmjJlih555BENHTpUW7duVUJCgkaMGCEPDw8FBQWpb9++evzxxxUWFqayZcsqISFBHh4e+X591KxZs5SVlaUmTZqoVKlS+uCDD+Tv76+YmBhJFz7G+frrr9W9e3f5+vq6BMBsCQkJuv322xUXF6fu3bsrMzNTX3zxhZ544ol8x3f//fdr4sSJ+vjjj9W5c2f16tVLffr00csvv6x69erpyJEjWr58uerUqaN27drpkUceUfPmzTV58mS1b99eX331lZYsWXLJr8Vq1aqVmjZtqo4dO2rSpEmqWrWq9u/fb124UKtWLT3++OPq3LmzKlWqpH379umHH37QvffeK+nCBU933nmnqlatqhMnTmjFihWqUaNGno81cuRINWrUSBMnTlS3bt20Zs0avfHGG3leqe4O0dHRWrlypVq2bKk2bdq4XL2arXbt2urVq5dee+21S67vhRdeUJs2ba5GV90ir7Fff/31Wrhwob777juFhoZq8uTJOnTo0CXfUHv16qWEhARlZGTolVdecblv/PjxevTRR1W6dGm1bdtW6enpSkpK0okTJzRixAirXUpKig4ePCin06nt27drwoQJqlq1qvX8u/7667Vo0SK1b99eDodDzzzzTJ5HPQYNGmQtc/Eb2KX6MnnyZJUvX1716tWTh4eHFixYoMjISNv9aMqxY8fUpUsXDRgwQHXq1FFQUJCSkpI0adIkdejQwWrXvHlzValSRX369FH16tWtU6HyM2vWLL311lu2/Eqi9PR0HTx4UFlZWTp06JC+/PJLJSYm6u6771afPn3k4eFR4Gtnw4YNi/Taf6n3mpxatWpl7Y9TpkxRZmamHnroIbVo0cLl1IDiFBQUpFGjRmn48OFyOp26+eablZqaqtWrVys4OFh9+/bVww8/rOnTp6tHjx4aPXq0wsLC9Ouvv2revHl65513rtlBi+y5k6QTJ07ojTfesI4aN27cWAkJCerbt6/GjRunI0eO6JFHHlHv3r2tCxQff/xxJSQkKC4uTnXr1tXMmTO1fv16zZkzR5Iuud/HxsZq+fLlatasmXx9fS/r1IDq1aurVatWGjJkiN5++215e3tr5MiR8vf3t9XXXebLvafslgwXfyly9r+BAwealStXmkaNGhkfHx8TGRlpnnjiCXP+/Hlr2ZMnT5qePXuaUqVKmcjISDN58mTTuHFj8+STT1ptcp5o/8knn5gmTZqY4OBgExAQYG688UazbNkyq+2aNWtMnTp1rItQjMl9Mr0xxnz88cembt26xsfHx5QpU8b87W9/s+67+AKZbPfff7+pVauWycrKMhkZGWbs2LEmNjbWeHt7m/Lly5tOnTqZjRs3Wu2nTZtmoqKijL+/v+nYsaN59tlnTWRkpHX/xSeg59wmjzzyiKlQoYLx9vY20dHRplevXmbPnj0mPT3ddO/e3foi9QoVKpihQ4eas2fPGmOMGTp0qImLizO+vr4mIiLC9O7d2/pi6IsvADPmwkUmNWvWNN7e3ua6664z//jHP1z6ktcFdfHx8VftC7zzutBj37595vrrrzc33nij6dSpU677d+3aZV00li2vsRpjzB133GEk2f4CsGwXj/3YsWOmQ4cOJjAw0JQtW9Y8/fTTpk+fPi7L5fX8PnHihPH19TWlSpWyLijKac6cOdb+Ehoaapo3b24WLVpk3Z9zv3c4HKZ8+fKmW7duZseOHS59bdmypfH39zfR0dHmjTfeyHdfu+WWW0ytWrXy3A4F9WXatGmmbt26JiAgwAQHB5vbb7/drFu3rqDNWiKdO3fOPPnkk6Z+/fqmdOnSplSpUqZatWrm6aefNmfOnHFp+/zzzxtJZtKkSbnWk9drX052ugAs+/nl5eVlIiIiTKtWrcyMGTNcfjShoNfObAW99hflvebi18bdu3ebe+65xwQEBJigoCDTpUsX6wImY/J+vc9v++d3AdjFr2dOp9NMmTLFVKtWzXh7e5uIiAjTpk0bs2rVKqvNtm3bTKdOnUxISIjx9/c31atXN4899tg1u0jy4nwQFBRkGjVqZBYuXGi12bhxo2nZsqXx8/MzYWFhZvDgwS6vQ1lZWWbcuHEmKirKeHt7m/j4eLNkyRLr/kvt95999pmpUqWK8fLysrZ3XheAXfz6OmzYMNOiRQvr9v79+82dd95pfH19TUxMjJk7d64pW7asmTp1avFsLDdyGJPjM3RcsbS0NEVFRenll18u8CMzOxo8eLC2bNmib775xt1dAUosY4yuv/56PfTQQy5HfgGgJNm3b5+io6O1bNmyQl9YWFJxmsEVSk5O1pYtW9S4cWOlpqZaX9Se86M0u3rppZfUunVrBQQEaMmSJZo9e3aJ+QgfKImOHDmiefPm6eDBgy4/lAEA7vbVV1/p9OnTql27tg4cOKDRo0crNjZWzZs3d3fXrhhhthi89NJL2rp1q3x8fNSgQQN98803eZ7rajdr167VpEmTdOrUKVWuXFmvvfaaBg0a5O5uASVW2bJlVaZMGU2bNu0v85U3AP4azp8/r6eeeko7d+5UUFCQbrrpJs2ZM+eyv92iJOE0AwAAANgWX80FAAAA2yLMAgAAwLYIswAAALAtwiwAAABsizALAAAA2yLMAoBN3XrrrXrssceKfb3jxo1T3bp1i329AHA1EGYB4Cro16+fHA6HHnjggVz3Pfzww3I4HOrXr1+h1rVy5Uo5HA6lpKQUbycB4C+AMAsAV0l0dLTmzZuns2fPWrVz585p7ty5uu6669zYMwD46yDMAsBVUr9+fUVHR2vRokVWbdGiRbruuutUr149q+Z0OpWYmKhKlSrJ399f8fHxWrhwoSTpt99+U8uWLSVJoaGhuY7oOp1OjR49WmFhYYqMjNS4ceNc+rBnzx516NBBgYGBCg4OVteuXXXo0CGXNi+88ILKlSunoKAgDRw4UOfOnXO5f+XKlWrcuLECAgIUEhKiZs2aaffu3cWxiQDgihFmAeAqGjBggGbOnGndnjFjhvr37+/SJjExUe+9956mTp2qn3/+WcOHD9d9992nVatWKTo6Wh9//LEkaevWrTpw4IBeffVVa9nZs2crICBA33//vSZNmqQJEyZo6dKlki4E3Q4dOuj48eNatWqVli5dqp07d6pbt27W8h999JHGjRun559/XklJSSpfvrzeeust6/7MzEx17NhRLVq00MaNG7VmzRoNGTJEDofjqmwvACgqfs4WAK6Cfv36KSUlRdOnT1d0dLS2bt0qSapevbr27t2rQYMGKSQkRP/85z8VFhamZcuWqWnTptbygwYN0pkzZzR37lytXLlSLVu21IkTJxQSEmK1ufXWW5WVlaVvvvnGqjVu3Fi33XabXnjhBS1dulR33nmndu3apejoaEnSL7/8olq1amnt2rVq1KiRbrrpJtWrV09vvvmmtY4bb7xR586d0/r163X8+HGFh4dr5cqVatGixVXeagBQdF7u7gAA/JVFRESoXbt2mjVrlowxateuncqUKWPd/+uvv+rMmTNq3bq1y3IZGRkupyLkp06dOi63y5cvr8OHD0uSNm/erOjoaCvISlLNmjUVEhKizZs3q1GjRtq8eXOui9SaNm2qFStWSJLCwsLUr18/tWnTRq1bt1arVq3UtWtXlS9fvmgbAgCuEsIsAFxlAwYM0NChQyXJ5QioJJ0+fVqStHjxYkVFRbnc5+vre8l1e3t7u9x2OBxyOp1X0t1cZs6cqUcffVRffvml5s+fr6efflpLly7VjTfeWKyPAwCXg3NmAeAqa9u2rTIyMnT+/Hm1adPG5b6aNWvK19dXe/bsUZUqVVz+ZR9R9fHxkSRlZWUV6XFr1KihvXv3au/evVbtl19+UUpKimrWrGm1+f77712W++9//5trXfXq1dOYMWP03Xff6YYbbtDcuXOL1BcAuFo4MgsAV5mnp6c2b95s/X9OQUFBGjVqlIYPHy6n06mbb75ZqampWr16tYKDg9W3b1/FxMTI4XDo888/11133SV/f38FBgZe8nFbtWql2rVrq1evXpoyZYoyMzP10EMPqUWLFmrYsKEkadiwYerXr58aNmyoZs2aac6cOfr5559VuXJlSdKuXbs0bdo03XPPPapQoYK2bt2q7du3q0+fPsW8lQDg8nBkFgCugeDgYAUHB+d538SJE/XMM88oMTFRNWrUUNu2bbV48WJVqlRJkhQVFaXx48frySefVLly5axTFi7F4XDoX//6l0JDQ9W8eXO1atVKlStX1vz586023bp10zPPPKPRo0erQYMG2r17tx588EHr/lKlSmnLli269957VbVqVQ0ZMkQPP/yw7r///ivYGgBQfPg2AwAAANgWR2YBAABgW4RZAAAA2BZhFgAAALZFmAUAAIBtEWYBAABgW4RZAAAA2BZhFgAAALZFmAUAAIBtEWYBAABgW4RZAAAA2BZhFgAAALb1//Fa78J3aazOAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define the methods and their corresponding accuracies\n",
    "methods = ['LogisticRegression', 'KNN', 'NaiveBayes', 'SVM', 'DecisionTree', 'Boosting']\n",
    "accuracies = [lr_acc, knn_acc, nbc_acc, svm_acc, dt_acc, boost_acc]  # Example accuracies, replace with your actual data\n",
    "\n",
    "# Plotting the bar chart\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.bar(methods, accuracies, color='skyblue')\n",
    "\n",
    "# Adding titles and labels\n",
    "plt.title('Accuracy of Different Methods')\n",
    "plt.xlabel('Methods')\n",
    "plt.ylabel('Accuracy')\n",
    "\n",
    "# Display the plot\n",
    "plt.ylim(0, 1)  # Set y-axis limit from 0 to 1\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)  # Adding grid lines\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8c9bd27",
   "metadata": {
    "papermill": {
     "duration": 0.01276,
     "end_time": "2024-05-06T16:16:50.765316",
     "exception": false,
     "start_time": "2024-05-06T16:16:50.752556",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Conclusion: \n",
    "\n",
    "Among all methods SVM and Decision Tree give 100% accuracy."
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 134415,
     "sourceId": 319416,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 37.548049,
   "end_time": "2024-05-06T16:16:51.904413",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-06T16:16:14.356364",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
